install.packages('olapR ')
install.packages('olapR')
library(olapR)
library(X4R)
install.packages('X4R')
install_github("overcoil/X4R")
library(devtools)
install_github("overcoil/X4R")
library(X4R)
install.packages('RDCOMClient')
library(data.table)
library(Hmisc)
library(plyr)
con <- COMCreate("ADODB.Connection")
library(RDCOMClient)
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=\\\\scrsvr\\Users\\wallworth\\Documents\\Projects\\Raw data\\data.cub",
"Persist Security Info=True",
sep = ";")
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=HelloCube",
"Catalog=myDataBase",
"Persist Security Info=True"
sep = ";")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=HelloCube",
"Catalog=myDataBase",
"Persist Security Info=True",
sep = ";")
con$Open()
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDH Analytical]"
rs <- COMCreate("ADODB.RecordSet")
rs$Open(query, con)
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=[SDH Analytical]",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
# define the MDX query here:
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDH Analytical]"
rs <- COMCreate("ADODB.RecordSet")
# submit the MDX query to the cube
rs$Open(query, con)
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=SDH Analytical",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source='SDH Analytical'",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=SDHAnalytical",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=SDHAnalytical",
"Catalog=HelloCube",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=SDHAnalytical",
"Catalog=HelloCube",
sep = ";")
con$Open()
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDHAnalytical]"
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=SDHAnalytical",
"Catalog=HelloCube",
"ProtectionLevel=Connect",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP",
"Data Source=localhost",
"Catalog=HelloCube",
"ProtectionLevel=Connect",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
sep = ";")
con$Open()
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDHAnalytical]"
rs <- COMCreate("ADODB.RecordSet")
rs$Open(query, con)
rs$MoveFirst()    # move to the first row of the record set
nc <- rs$Fields()$Count()     # define number of columns
dd <- vector("list", length=nc)
dd <- rs$GetRows()  # get the raw data from the results
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
sep = ";")
con$Open()
# define the MDX query here:
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDHAnalytical]"
rs <- COMCreate("ADODB.RecordSet")
# submit the MDX query to the cube
rs$Open(query, con)
rs$MoveFirst()    # move to the first row of the record set
nc <- rs$Fields()$Count()     # define number of columns
# get the data into a data array:
dd <- vector("list", length=nc)
dd <- rs$GetRows()  # get the raw data from the results
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP",
"Data Source=localhost",
"Catalog=HelloCube",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
sep = ";")
con$Open()
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
sep = ";")
con$Open()
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP.5",
"Data Source=localhost",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDHAnalytical]"
rs <- COMCreate("ADODB.RecordSet")
# submit the MDX query to the cube
rs$Open(query, con)
con <- COMCreate("ADODB.Connection")
con[["ConnectionString"]] <- paste(
"Provider=MSOLAP",
"Data Source=localhost",
"Catalog=HelloCube",
"Persist Security Info=True",
sep = ";")
con$Open()
query = "SELECT { [Measures].[12 Month Order Quantity] } ON COLUMNS,  {[CD Part].[Part SID]} ON ROWS FROM [SDHAnalytical]"
rs <- COMCreate("ADODB.RecordSet")
rs
rs$Open(query, con)
rs$MoveFirst()    # move to the first row of the record set
nc <- rs$Fields()$Count()     # define number of columns
dd <- vector("list", length=nc)
dd
dd <- rs$GetRows()  # get the raw data from the results
dd
library(FinCal)
install.packages(Fincal)
install.packages("Fincal")
install.packages("FinCal")
library(FinCal)
library(reshape2)
dat <- get.ohlc.yahoo('AAPL', '2015-12-01', '2015-12-31')
#dat$date <- strptime(dat$date, "%Y-%m-%d")
dat$date <- as.Date(dat$date, "%Y-%m-%d")
dat$times <- seq(nrow(dat))
mm <- melt(subset(dat, select=c(times,adjusted, volume)), id.var="times")
p1 <- ggplot(dat, aes(date, adjusted)) + geom_line() + theme_minimal() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank())
p2 <- ggplot(dat,aes(date, volume)) + geom_bar(stat="identity") + theme_minimal() +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle=90))
library(ggplot2)
ggplot(mm, aes(x = times, y = value)) + geom_line(aes(color = variable)) +
facet_grid(variable ~ ., scales = "free_y") + theme(legend.position = "none")
p1 <- ggplot(dat, aes(date, adjusted)) + geom_line() + theme_minimal() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank())
p2 <- ggplot(dat,aes(date, volume)) + geom_bar(stat="identity") + theme_minimal() +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle=90))
p1
p2
library(grid)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
library(ggplot2)
( g <- ggplot(eq, aes(x = Magnitude, y = Depth)) +
geom_point() +
geom_point(data = eq,
color = eq$mag.col, size = 3) )
ggsave(g, file="c:\\eqDepthMagnitude.svg")
library(plumber)
?plumb
getwd()
dir
dir()
z = plumb("plumber.R")
z = plumb("plumber.R")
z$run(port=8000)
par(mar = rep(2, 4)) # margins
dates <- seq(as.Date("2015-10-01"),
as.Date("2015-10-31"), by=1)
sold <- 1:31
plot(dates, sold, type="b", main="Sales")
z$run(port=8000)
z = plumb("plumber.R")
z$run(port=8000)
Sys.time()
z = plumb("plumber.R")
z$run(port=8000)
z = plumb("plumber.R")
z$run(port=8000)
