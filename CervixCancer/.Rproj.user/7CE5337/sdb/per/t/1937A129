{
    "collab_server" : "",
    "contents" : "W_conv1 <- weight_variable(shape(Convstride, Convstride, 1L, FilterCount))\nb_conv1 <- bias_variable(shape(32L))\n\nx_image <- tf$reshape(x, shape(-1L, xdim, ydim, 1L))\n\nh_conv1 <- tf$nn$relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 <- max_pool_2x2(h_conv1)\n\n#second layer\nW_conv2 <- weight_variable(shape = shape(Convstride, Convstride, FilterCount, 64L))\nb_conv2 <- bias_variable(shape = shape(64L))\n\nh_conv2 <- tf$nn$relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 <- max_pool_2x2(h_conv2)\n\n#Densely connected layer\nW_fc1 <- weight_variable(shape(15L * 15L * 64L, 1024L))\nb_fc1 <- bias_variable(shape(1024L))\n\nh_pool2_flat <- tf$reshape(h_pool2, shape(-1L, 15L * 15L * 64L))\nh_fc1 <- tf$nn$relu(tf$matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n#drop out layer for overfitting\nkeep_prob <- tf$placeholder(tf$float32)\nh_fc1_drop <- tf$nn$dropout(h_fc1, keep_prob)\n\n#Read out layer\nW_fc2 <- weight_variable(shape(1024L, ClassCount))\nb_fc2 <- bias_variable(shape(ClassCount))\n\ny_conv <- tf$nn$softmax(tf$matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n#Once all layers defined\ncross_entropy <- tf$reduce_mean(-tf$reduce_sum(y_ * tf$log(y_conv), reduction_indices=1L))\ntrain_step <- tf$train$AdamOptimizer(1e-4)$minimize(cross_entropy)\ncorrect_prediction <- tf$equal(tf$argmax(y_conv, 1L), tf$argmax(y_, 1L))\naccuracy <- tf$reduce_mean(tf$cast(correct_prediction, tf$float32))\n\nprediction <- tf$argmax(y_conv, 1L)\nprobabilities <- y_conv\nsess$run(tf$global_variables_initializer())\n\nfor (i in 1:10) {\n    #batch <- mnist$train$next_batch(50L)\n    if (i %% 100 == 0) {\n        train_accuracy <- accuracy$eval(feed_dict = dict(x = input[[1]], y_ = input[[2]], keep_prob = 1.0))\n        cat(sprintf(\"step %d, training accuracy %g\\n\", i, train_accuracy))\n    }\n    train_step$run(feed_dict = dict(x = as.matrix(input[[1]]), y_ = as.matrix(input[[2]]), keep_prob = 0.5))\n}\n\ntrain_accuracy <- accuracy$eval(feed_dict = dict(x = as.matrix(input[[1]]), y_ = as.matrix(input[[2]]), keep_prob = 1.0))\n\nprediction$eval(feed_dict = dict(x = as.matrix(input[[1]][1,]), keep_prob = 1.0), session=sess)\nprobabilities$eval(feed_dict = dict(x = as.matrix(input[[1]]), keep_prob = 1.0), session=sess)\n                 ",
    "created" : 1491244763548.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "624654973",
    "id" : "1937A129",
    "lastKnownWriteTime" : 1491286178,
    "last_content_update" : 1491286178806,
    "path" : "C:/R/CervixCancer/services/TensorFlowModel.R",
    "project_path" : "services/TensorFlowModel.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}