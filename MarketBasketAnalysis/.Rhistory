?eclat
rules
rhs(rules)
str(rhs(rules)@itemInfo)
duplicated(rules)
sum(duplicated(rules))
labels(rules)
rules
rules2
inspect(rules2)
inspect(rules2)$rhs
inspect(rules2)$lhs
inspect(rules2)$lhs=='whole milk'
data.frame(inspect(rules2))
x=data.frame(inspect(rules2))
View(x)
as(rules2,"data.frame")
x=data.frame(inspect(rules))
x=data.frame(inspect(rules2))
rules1<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2
rules
inspect(rules)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="rice,sugar"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2
library(plumber)
?plumb
?plumber
plumb("MainREST.R")
plumb("MainREST.R")
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
rules = apriori(Groceries, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
trans = Groceries
trans
rules = apriori(trans, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
inspect(rules)
rules<-sort(rules, by="confidence", decreasing=TRUE)
inspect(rules[1:5])
data.frame(inspect(rules[1:5]))
data.frame(inspect(rules[1:5]))$rhs
t =data.frame(inspect(rules[1:5]))
t
t$rhs
unique(t$rhs)
rules = apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df = data.frame(inspect(rules[1:5])
)
df$lhs
as.character(df$lhs)
df
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df = data.frame(inspect(rules[1:5]))
df
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df = data.frame(inspect(rules[1:5]))
df
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df = data.frame(inspect(rules[1:5]))
df
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df = data.frame(inspect(rules[1:5]))
df
}
}
Recommend()
test = Recommend()
View(test)
as(rules, "data.frame")
df=as(rules, "data.frame")
View(df)
r = plumb("MainREST.R")
r$run(port=8000)
Recommend()
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
Recommend()
?apriori
data=trans
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
list(df[1:5])
list(df[1:5,])
r = plumb("MainREST.R")
r$run(port=8000)
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
ldf[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend()
apriori
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
ldf[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules<-sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend()
x=Recommend()
class(c)
class(x)
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = sort(rules, by="confidence", decreasing=TRUE)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
confidence
r = plumb("MainREST.R")
confidence
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
r = plumb("MainREST.R")
r$run(port=8000)
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs=rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=lhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend(rhs='whole milk')
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend(rhs='whole milk')
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend(rhs='whole milk')
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs= rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice","sugar")),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend(rhs='whole milk')
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="rhs",lhs= lhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="lhs",rhs = rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df[1:5,]
}
}
Recommend(rhs='whole milk')
r = plumb("MainREST.R")
r = plumb("MainREST.R")
r$run(port=8000)
x=Recommend(rhs='whole milk')
x
x$rules
t=x$rules[1]
gsub(".*{|}.*", "", t)
gsub(".*\{|\}.*", "", t)
gsub(".*|.*", "", t)
gsub(".*{ | }.*", "", t)
gsub(".*{", "", t)
gsub(".*{|}.*", "", t)
t
gsub(".*{|}.*", "", as.character(t)
)
gsub(".*{|}.*", "", as.character(t))
gsub(".*{ | }.*", "", as.character(t))
gsub(".*<i> | <i>.*", "", as.character(t))
?split
split(t, '=>')
strsplit(t, '=>')
strsplit(as.character(t), '=>')
strsplit(as.character(x$rules), '=>')
strsplit(as.character(x$rules), '=>')[[1]]
strsplit(as.character(x$rules), '=>')[[1]][1]
strsplit(as.character(x$rules), '=>')[[1]][2]
strsplit(as.character(x$rules), '=>')
x=Recommend(lhs='whole milk')
strsplit(as.character(x$rules), '=>')
y = strsplit(as.character(x$rules), '=>')
lapply(y, tail,1)
lapply(strsplit(as.character(x$rules), '=>'), tail,1)
unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))
x=Recommend(lhs='yogurt')
x=Recommend(lhs='yogurt')
unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))
y=unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))
gsub(".*{} | }.*", "", y)
gsub(".*{ | }.*", "", y)
y
?gsub
gsub(" {", '', y)
gsub(" \{", '', y)
gsub('' {', '', y)
gsub(" {", '', y)
gsub(" /{", '', y)
gsub(" \\{", '', y)
gsub(".*\\{ | \\}.*", "", y)
gsub(" \\{", '', y)
gsub("}", "", gsub(" \\{", '', y))
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))))
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="rhs",lhs= lhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))))
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="lhs",rhs = rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))))
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(x$rules), '=>'), tail,1))))
df[1:5,]
}
}
x=Recommend(lhs='yogurt')
df
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="rhs",lhs= lhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="lhs",rhs = rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
}
}
x=Recommend(lhs='yogurt')
x
Recommend = function(lhs  = '', rhs = '', data = trans){
if(lhs != '' & rhs != ''){
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else if (lhs != '' & rhs == ''){
rules = apriori(data, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="rhs",lhs= lhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else if(lhs == '' & rhs != ''){
rules<-apriori(data, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="lhs",rhs = rhs),
control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
} else {
rules = apriori(data, parameter = list(sup = 0.001, conf = 0.5, target="rules"), control = list(verbose=F))
rules = arules::sort(rules, by="confidence", decreasing=TRUE)
df=as(rules, "data.frame")
df$recommendation  = gsub("}", "", gsub(" \\{", '', unlist(lapply(strsplit(as.character(df$rules), '=>'), tail,1))))
df[1:5,]
}
}
x=Recommend(rhs='yogurt')
x
r = plumb("MainREST.R")
r = plumb("MainREST.R")
r$run(port = 8000)
